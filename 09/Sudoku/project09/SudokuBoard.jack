// Sudok Board class currently only single 3x3 block is implemented.
// API: constructor without arguments
// public method: fillSingleBlock(), checkBoard(), drawSingleBlockFrame()
class SudokuBoard {
    field Array allFields, checkerArray;
    field int singleBlockRows, singleBlockColumns, totalRowsNum, totalFields, totatlColumnsNum, board_size;
    /** Constructs a sudoku board. */
    constructor SudokuBoard new() {
      let totalRowsNum = 3;
      let totatlColumnsNum = 3;
      let board_size = 67;
      let totalFields = totalRowsNum*totatlColumnsNum;
      // checkerArray is used to verify if a digit is not repeated in a single block
      let checkerArray = Array.new(totalFields);
      let allFields = Array.new(totalFields);
      // init checkArray with 9 zeros ;)
      do initChecker();
      return this;   
   }
   method void initChecker() {
    var int i;
    let i = 0;
    while (i < totalFields){
      let checkerArray[i] = 0;
      let i = i + 1;
    }
    return;
   }
   method void fillSingleBlock() {
     /** Fill single Sudoku 3x3 block */
     var int row, column, input, currentField;
     let row = 0;
     let column = 0;
     while (row < totalRowsNum){
      while (column < totatlColumnsNum){
        let currentField = row*totalRowsNum+column;
        do Output.printString("Enter Sudoku Block 1 Element: ");
        do Output.printInt(currentField);
        do Output.println();
        let input = InputGetter.getSingleDigit();
        let allFields[currentField] = input;
        let column = column + 1;
        do Screen.clearScreen();
        do Output.moveCursor(0, 0);
      }
      let column = 0;
      let row = row + 1;
     }
     return;
   }
    method void checkBoard() {
      var int block, input;
      let block = 0;
      do checkSingle3x3Block(block);
      do Output.moveCursor(10, 0);
      do Output.printString("Block: ");
      do Output.printInt(block);
      do Output.printString(" is completed properly. Congratulations!");
      return;
   }

   method void drawSingleBlockFrame(){
     var int x, y, row, column, x_pos, y_pos, index;
     let index = 0;
     let x = 0;
     let y = 0;
     let row = 0;
     let column = 0;
     do Screen.setColor(1);
     do Screen.drawRectangle(1, 1, board_size, board_size);
     while (y < totatlColumnsNum){
       while (x < totalRowsNum){
         let x_pos = x * 2 + 1;
         let y_pos = y * 2 + 1;
         do Output.moveCursor(x_pos, y_pos);
         do Output.printInt(allFields[index]);
         let x = x + 1;
         let index = index + 1;
       }
       let x = 0;
       let y = y + 1;
     }
      return;
   }

   method void checkSingle3x3Block(int block) {
      var int firstElement, currentElement, index;
      let firstElement = block * 9;
      let index = firstElement;
      while(index < (firstElement + 9)){
        let currentElement = allFields[index];
        // Check if this digit occurred on previous postions 
        if (checkerArray[currentElement] = 1){
          do Output.moveCursor(10, 0);
          do Output.printString("Sudoku is completed incorrectly!!!");
          do Output.println();
          do Output.printString("Check block: ");
          do Output.printInt(block);
          do Output.printString(" index: ");
          do Output.printInt(index);
          do Output.println();
          do Output.println();
          do Sys.error(2);
        }
        // Set checkerArray of current element to 1
        // If this digit occures more times it will fail Suodku rules ;) 
        let checkerArray[currentElement] = 1;
        let index = index + 1;
      }
      do initChecker();
      return;
   }
   /** Disposes this SudokuBoard. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }
}